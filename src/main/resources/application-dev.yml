#数据库配置
datasource:
  # 使用druid数据源
  type: com.alibaba.druid.pool.DruidDataSource
  # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
  initialSize: 10
  # 最小连接数
  minIdle: 10
  # 最大连接数
  maxActive: 100
  # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，
  # 缺省启用公平锁，并发效率会有所下降，
  # 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
  maxWait: 60000
  # 1) Destroy线程会检测连接的间隔时间
  # 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
  timeBetweenEvictionRunsMillis: 60000
  # Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于
  # minEvictableIdleTimeMillis，则关闭当前连接。
  minEvictableIdleTimeMillis: 30000
  # 用来检测连接是否有效的sql，要求是一个查询语句。
  # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
  validationQuery: select 'x'
  # 建议配置为true，不影响性能，并且保证安全性。
  # 申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis，
  # 执行validationQuery检测连接是否有效。
  testWhileIdle: true
  # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
  testOnBorrow: false
  # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
  testOnReturn: false
  # 是否缓存preparedStatement，也就是PSCache。
  # PSCache对支持游标的数据库性能提升巨大，比如说oracle。
  # 在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。
  # 5.5及以上版本有PSCache，建议开启。
  poolPreparedStatements: true
  # 要启用PSCache，必须配置大于0，当大于0时，
  # poolPreparedStatements自动触发修改为true。
  # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，
  # 可以把这个数值配置大一些，比如说100
  maxPoolPreparedStatementPerConnectionSize: 100
  # 配置监控统计拦截的filters，监控统计用的stat、日志用的log4j、 防御sql注入的wall、ConfigFilter非对称加密password
  filters: stat,wall,slf4j
  # 打开mergeSql功能；慢SQL记录
  # ConfigFilter非对称加密的公钥，config.decrypt=true;config.decrypt.key=${publickey}
  connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000;
  #配置了多数据源
  master:
      url: jdbc:mysql://localhost:3306/cess?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false
      username: root
      password: 123456
      driver-class-name: com.mysql.cj.jdbc.Driver
  cluster:
      url: jdbc:mysql://localhost:3306/cess?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false
      username: root
      password: 123456
      driver-class-name: com.mysql.cj.jdbc.Driver
  xxl:
    url: jdbc:mysql://localhost:3306/xxl_job?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver

mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    #驼峰下划线转换
    map-underscore-to-camel-case: true
    cache-enabled: false
  # xml
  mapper-locations: classpath*:mapper/*.xml,classpath*:mapper/*/*.xml,classpath*:mapper/*/*/*.xml
  # 实体扫描，多个package用逗号或者分号分隔
  type-aliases-package: cn.edu.cess.entity
  # 扫描枚举类 # 支持统配符 * 或者 ; 分割
  #  type-enums-package: com.fengwenyi.mybatis_plus_example.enums
  global-config:
    #刷新mapper 调试神器
    db-config:
      #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
      id-type: ID_WORKER
      #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
      field-strategy: NOT_EMPTY
      #数据库大写下划线转换
      #capital-mode: true
      #逻辑删除配置
      logic-delete-value: 1
      logic-not-delete-value: 0
      db-type: mysql
    refresh: true
    #自定义填充策略接口实现
    #meta-object-handler: com.baomidou.springboot.xxx
    #自定义SQL注入器
    #sql-injector: com.baomidou.springboot.xxx

spring:
  redis:
    # redis 数据库索引（默认为0）
    database: 1
    #redis服务器地址
    host: 120.77.32.19
    # Redis服务器连接密码（默认为空）
    password: 1234
    # Redis服务器连接端口
    port: 6789
    # 连接超时时间（毫秒）
    timeout: 2000
    # 配置 redis 连接池
    jedis:
      pool:
        # 连接池最大连接数　（使用负值表示没有限制）
        max-active: 1000
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: 5000
        # 连接池的最大空闲连接
        max-idle: 100
        # 连接池中 最小空闲连接
        min-idle: 0

logback:
  logDir: log/dev
  appName: cess_log
  fileType: log
logging:
  level:
    cn.edu.cess: debug
#  config: classpath:logback-spring.xml

swagger:
  enable: true